*build.nvim.txt*                      A build system detection tool for neovim

==============================================================================
Table of Contents                               *build.nvim-table-of-contents*

1. Overview                                              |build.nvim-overview|
   - Requirements                                    |build.nvim-requirements|
   - Features                                            |build.nvim-features|
2. Installation                                      |build.nvim-installation|
   - Vim-plug                               |build.nvim-installation-vim-plug|
   - Lazy.nvim                                  |build.nvim-installation-lazy|
   - Packer                                   |build.nvim-installation-packer|
3. Usage                                                    |build.nvim-usage|
   - Note for Meson and Cargo                         |build.nvim-usage-notes|
   - Lua API                                              |build.nvim-lua-api|
4. Configuration                                    |build.nvim-configuration|
5. Indicators                                          |build.nvim-indicators|
6. Programs                                              |build.nvim-programs|
   - Program Handler Functions          |build.nvim-program-handler-functions|
7. Contributing                                      |build.nvim-contributing|

==============================================================================
Overview			            *build.nvim* *build.nvim-overview*

A lua neovim plugin to extend the functionality of the `:compiler` and `:make`
workflow with more build systems and workspace autodetection.

REQUIREMENTS                                         *build.nvim-requirements*

- neovim >= 0.10

FEATURES                                                 *build.nvim-features*

Automatically detects your build system based on the first build file found,
currently supports:
- CMake (`CMakeLists.txt`)
- Cargo (`Cargo.toml`)
- Make (`Makefile`)
- Meson (`meson.build`)
- Ninja (`build.ninja`)
- Setuptools (`setup.py`)
- Zig (`build.zig`)

Automatically detects project root based on the presence of a file
- Git, mercurial, svn and a few other version control systems
- `package.json`, `Makefile`, `Cargo.toml`, etc

Gets out of your way
- Integrates with builtin neovim features to allow transparent overriding

==============================================================================
Installation                                         *build.nvim-installation*

Install as you would any other plugin.

VIM-PLUG                                    *build.nvim-installation-vim-plug*

>vim
	" Vimscript
	call plug#begin(s:plug_dir)
	Plug "cyuria/build.nvim"
	call plug#end()
	
	lua << EOF
	require('build').setup({
		-- put your configuration here
		-- or don't, see the config section for
		-- available options and defaults
	})
	EOF
<

LAZY.NVIM                                  *build.nvim-installation-lazy.nvim*

>lua
	require('lazy').setup({
		"cyuria/build.nvim",
		opts = {
			-- put your configuration here
			-- or don't, see the config section for
			-- available options and defaults
		}
	})
<

PACKER                                        *build.nvim-installation-packer*

>lua
	-- lua
	use {
		"cyuria/build.nvim",
		config = function()
			require('build').setup({
				-- put your configuration here
				-- or don't, see the config section for
				-- available options and defaults
			})
		end
	}
<

==============================================================================
Usage                                                       *build.nvim-usage*

By default `build.nvim` automatically sets the compiler with `:compiler`,
which will itself set `'makeprg'` and `'errorformat'`. These work with `:make`
and the quickfix list.

NOTE FOR SOME BUILD SYSTEMS                           *build.nvim-usage-notes*
                                         *build.nvim-cargo* *build.nvim-meson*

Some build systems, i.e. meson and zig will need an extra argument, such as
`:make compile` with meson or `:make build` with cargo and zig. This allows
you more control, like running `:make test`.

To override these, simply use the `zig_build` compiler instead of the
autodetected `zig` compiler.

==============================================================================
Configuration                                       *build.nvim-configuration*

`build.nvim` comes with the following options and defaults.

>lua
	require('build').setup({
		-- Events to set the compiler on. Set this to {} to not
		-- generate an autocommand for this
		update_events = {
			"DirChanged",
			"BufRead",
		},

		-- A list of marker files which indicate the parent directory
		-- should be considered the project root
		root = {
			".bzr",
			".git",
			".hg",
			".svn",
			"_darcs",
			"package.json",
		},
		-- Extra marker files. Use this to avoid overwriting the
		-- default markers
		root_extra = {},
	})
<

==============================================================================
Contributing                                         *build.nvim-contributing*

https://github.com/cyuria/build.nvim

Please feel free to submit any PRs or issues, especially if they add support
for more build systems. It would be great if we could support every build
system under the sun.

vim:tw=78:ts=8:noet:ft=help:norl
